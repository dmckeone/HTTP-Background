/* Copyright (c) 2010 David McKeone
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* SIMPLE OBJECT (HEADER)
 * 
 * This object has some simple functionality to show how to do basic method calls and property setting
 *
 * NOTE: All headers for external components must have the .he extension instead of the standard .h
 *       To enable code-highliting in Visual Studio 2008 go to Tools->Options-Text Editor-File Extension 
 *       and add "he" as a "Microsoft Visual C++" experience.
 *
 * March 30, 2010 David McKeone (Created)
 */

#include <extcomp.he>
#include "NVObjBase.he"
#include "OmnisTools.he"

#include <boost/thread.hpp>

#ifndef SIMPLE_HE_
#define SIMPLE_HE_

class ThreadTimer;
class NVObjSimple;

EXTqlist* doWork(NVObjSimple* theObj, qlong* curCount, std::string connInfo, std::string query, EXTqlist* list);

// Example of Functor thread
class WorkObj {
private:
    NVObjSimple* _theObj;
    qlong* _count;
    EXTqlist* _list;
    std::string _query;
    std::string _connInfo;
public:
    WorkObj() : _theObj(0), _count(0) {}
    WorkObj(NVObjSimple* theObj, qlong* count, std::string connInfo, std::string query, EXTqlist* list) : _theObj(theObj), _count(count), _connInfo(connInfo), _query(query), _list(list) {}
    void operator()() {
        doWork(_theObj,_count, _connInfo, _query, _list);
    }
    
    EXTqlist* result() { return _list; }
};

// Class definition for C++ version of your object
class NVObjSimple : public NVObjBase
{
private:
	qlong myProperty; /* Value for $myproperty */
	qlong curCount;
    bool _threadRunning;
    boost::thread currentThread;
    WorkObj _work;
    std::string _query;
    std::string _connInfo;
protected:
public:		    
	// Static tracking variable
	static qshort objResourceId;  // This static variable needs to be in all inherited objects
	
	// Constructor / Destructor
	NVObjSimple( qobjinst objinst, OmnisTools::tThreadData *pThreadData );
	virtual ~NVObjSimple();
    
    // Thread timer
    virtual int notify();

	// Methods Available and Method Call Handling
	virtual qlong returnMethods( OmnisTools::tThreadData* pThreadData );
	virtual qlong methodCall( OmnisTools::tThreadData* pThreadData );

	// Properties and Property Call Handling
	virtual qlong returnProperties( OmnisTools::tThreadData* pThreadData );
	virtual qlong getProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong setProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong canAssignProperty( OmnisTools::tThreadData* pThreadData, qlong propID );
	
	// Custom (Your) Methods
	OmnisTools::tResult methodStart( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodStop( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	OmnisTools::tResult methodCheck( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
	
	// Internal thread methods
	void startThread();
	void stopThread();
	void checkThread();
    
    bool _workStopped;
};

#endif /* SIMPLE_HE_ */