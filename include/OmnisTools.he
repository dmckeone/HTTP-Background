/* Copyright (c) 2010 David McKeone
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* OMNIS TOOLS (HEADER)
 * 
 * This is a colleciton of tools for creating omnis components
 *
 * NOTE: All headers for external components must have the .he extension instead of the standard .h
 *       To enable code-highliting in Visual Studio 2008 go to Tools->Options-Text Editor-File Extension 
 *       and add "he" as a "Microsoft Visual C++" experience.
 *
 * October 4, 2010 David McKeone (Created)
 */


// Boost includes
#define USE_BOOST
#ifdef USE_BOOST
	#include <boost/asio.hpp>
    #include <boost/shared_ptr.hpp>
    #include <boost/any.hpp>
    #include <boost/algorithm/string.hpp>
#endif

//Omnis includes
#include <extcomp.he>
#include <chrbasic.he>

// C Library includes
#include <ctime>

// STD Library includes
#include <string>
#include <map>
#include <vector>

#ifndef OMNIS_TOOLS_HE_
#define OMNIS_TOOLS_HE_

namespace OmnisTools {
    
#ifdef USE_BOOST
    struct CaseInsensitiveLess : std::binary_function<std::string, std::string, bool>
    {                
        bool operator() (const std::string & s1, const std::string & s2) const {
            return boost::lexicographical_compare(s1, s2, boost::is_iless());
        }
    };
    
    // Row like object to simulate an Omnis row in C++ standard types.
    typedef std::map<std::string, boost::any, CaseInsensitiveLess> ParamMap;
#endif
    
	// Generic result type for returning error status
	typedef qlong tResult;
	
	// Thread data struct is an ease-of-use tool to keep track of the current context, 
	// rather than just passing eci everywhere
	struct tThreadData 
	{
		tThreadData( EXTCompInfo* pEci ) { mEci = pEci, mCurMethodName = ""; mExtraErrorText = ""; }
		
		EXTCompInfo* mEci;
		std::string mCurMethodName;
		std::string mExtraErrorText;
	}; 
	
	// Struct for managing EXTfldval types
	struct FieldValType {
		ffttype valType;
		qshort valSubType;
	};
	
	// Parameter helpers
	qbool getParamVar( tThreadData* pThreadData, qshort pParamNum, EXTfldval& pOutVar );
	qbool getParamVar( EXTCompInfo* pEci, qshort pParamNum, EXTfldval& pOutVar );
	qbool getParamList( tThreadData* pThreadData, qshort pParamNum, EXTqlist& pOutList, qbool pCanBeRow = qfalse );
	qbool getParamBool( tThreadData* pThreadData, qshort pParamNum, qbool& pOutBool );
	qbool getParamShort( tThreadData* pThreadData, qshort pParamNum, qshort& pOutShort );
	qbool getParamLong( tThreadData* pThreadData, qshort pParamNum, qlong& pOutInteger );
	
	FieldValType getType(EXTfldval&);
	
	// List helpers
	qbool isList( EXTfldval& pFVal, qbool pCanBeRow = qfalse);
	
	// qbool/bool helpers
	qbool getQBoolFromBool(bool);
	bool getBoolFromQBool(qbool);
	
	// std::wstring/EXTfldval helpers
	std::wstring getWStringFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromWString(EXTfldval&, const std::wstring);
    void getEXTFldValFromWChar(EXTfldval&, const wchar_t*);
	
	// std::string/EXTfldval helpers
	std::string getStringFromEXTFldVal(EXTfldval&);
	void getEXTFldValFromString(EXTfldval&, const std::string);
    void getEXTFldValFromChar(EXTfldval&, const char*);
	
	// std::string/qchar* helpers
	qchar* getQCharFromString( const std::string readString, qlong &retLength );
	qchar* getQCharFromWString( const std::wstring readString, qlong &retLength );
	
    // Binary/EXTfldval helpers
    template<class T>
    void getEXTfldvalFromBinary(EXTfldval& fVal, T* data) {
        if (data) {
            qlong binSize = sizeof(data) / sizeof(T);
            qbyte* binAssign = static_cast<qbyte*>(MEMmalloc(binSize * sizeof(qbyte)));
            if (binAssign) {
                MEMmovel(data, binAssign, binSize);
                fVal.setBinary(fftBinary, binAssign, binSize);
            }
        }
    }
    
    template<class T>
    T* getBinaryFromEXTfldval(EXTfldval& fVal, qlong& length) {
        qlong binSize = fVal.getBinLen();
        qbyte* binData = new qbyte[binSize];
        
        fVal.getBinary(binSize, binData, binSize);
        
        // Set return values and data reference
        length = static_cast<qlong>(binSize);
        
        return reinterpret_cast<T*>(binData);
    }
    
    template<class T>
    T* getBinaryFromEXTfldval(EXTfldval& fVal) {
        qlong discardLength = 0;
        return getBinaryFromEXTfldval<T>(fVal, discardLength);
    }
    
    // strxxx helpers
    str15 initStr15(const char*);
    str31 initStr31(const char*);
    str80 initStr80(const char*);
    str255 initStr255(const char*);
    
	// C++ type helpers
    std::vector<unsigned char> getBinaryVectorFromEXTFldVal(EXTfldval& fVal);
    void getEXTFldValFromBinaryVector(EXTfldval& fVal, std::vector<unsigned char>&); 
	bool getBoolFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromBool(EXTfldval& fVal, bool);
	int getIntFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromInt(EXTfldval& fVal, int);
	long getLongFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromLong(EXTfldval& fVal, long);
    float getFloatFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromFloat(EXTfldval& fVal, float);
	double getDoubleFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromDouble(EXTfldval& fVal, double);
    
    // C type helpers
    void getEXTFldValFromTime(EXTfldval& fVal, struct tm* utcTime);
    
    void getEXTFldValFromConstant(EXTfldval& fVal, qlong constID, qlong prefixID = 0);
#ifdef USE_BOOST
	int getIntFromEXTFldVal(EXTfldval& fVal, qlong firstConstID, qlong lastConstID);
    
    boost::any getAnyFromEXTFldVal(EXTfldval& val);
    bool getParamsFromRow(tThreadData* pThreadData, EXTfldval& row, ParamMap& params);
#endif
	
	// get ISO 8601 std::string from Date
	std::string getISO8601DateStringFromEXTFldVal(EXTfldval&);
	
	// POSIX/HFS Paths
	qbool ensurePosixPath(EXTfldval&);
	
	// ************ TEMPLATES ************ //
	
	// Generic method for retrieving an object by it's instance
	template <class T>
	T* getObjForInstance(tThreadData* pThreadData, qobjinst inst) {
		if (!inst) {
			return 0;
		}
		
		inst = (qobjinst) ECOgetNVObject(inst); // Attempt to get super class for NV Objects that are inherited by Omnis objects
		if (!inst) {
			return 0;
		}
		
		LPARAM lparamPtr = (LPARAM) inst;
		void* omnisPtr = ECOfindNVObject(pThreadData->mEci->mOmnisInstance, lparamPtr);
		if (!omnisPtr) {
			return 0;
		}
		
		// Verify that the correct object was retrieved
		T* retPtr = reinterpret_cast<T*>( omnisPtr );
		if (retPtr->objResourceId != T::objResourceId ) {
			return 0;
		}
		
		return retPtr;
	}
	
	// Generic method for setting an EXTfldval with an object
	template <class T>
	void getEXTFldValForObj(EXTfldval& fVal, T* obj) {
		if (!obj)
			return;
		
		qobjinst inst = obj->getInstance();
		fVal.setObjInst( inst, qtrue );
	}
	
	// Generic method for retrieving an object from it's EXTfldval
	template <class T>
	T* getObjForEXTfldval(tThreadData* pThreadData, EXTfldval &fVal) {
		qobjinst inst;
		if (getType(fVal).valType == fftObject) {
			inst = fVal.getObjInst(qfalse);
		} else if (getType(fVal).valType == fftObjref) {
			inst = fVal.getObjRef();
		} else {
			// Unknown type
			return 0;
		}
		
		return getObjForInstance<T>(pThreadData, inst);
	}
	
	// Generic method for creating a new object in the Omnis pool
	template <class T>
	T* createNVObj(qshort objectType, tThreadData* pThreadData) {
		qlong saveCompId = pThreadData->mEci->mCompId;  // Save the current comp ID
		
		pThreadData->mEci->mCompId = objectType; // Set the comp ID for the NEW object
		qobjinst newObjInst = EXTobjinst( pThreadData->mEci );  // Create the new object (this calls ECM_OBJCONSTRUCT)
		
		pThreadData->mEci->mCompId = saveCompId; // Restore the saved comp ID
		
		T* nvObj = getObjForInstance<T>(pThreadData, newObjInst); // Locate the newly created object pointer
		
		return nvObj;
	}
	
	// Generic method creating a new object in the Omnis pool from just the object
	// Requires that T has the static member objResourceId set. (See NVObjBase)
	template <class T>
	T* createNVObj(tThreadData* pThreadData) {
		qshort objectType = T::objResourceId;
		
		return createNVObj<T>(objectType, pThreadData);
	}
    
    // Generic method to copy a non-visual object from the Omnis dispatch
    template<class T>
    void copyNVObj( qlong propID, objCopyInfo* copyInfo, OmnisTools::tThreadData* pThreadData) {
        
        LPARAM source = reinterpret_cast<LPARAM>(ECOgetNVObject( (qobjinst) copyInfo->mSourceObject));
        T* src = (T*) ECOfindNVObject( pThreadData->mEci->mOmnisInstance, source );
        if( src )
        {
            LPARAM destination = reinterpret_cast<LPARAM>(ECOgetNVObject( (qobjinst) copyInfo->mDestinationObject));
            
            T* dest = (T*)ECOfindNVObject( pThreadData->mEci->mOmnisInstance, destination );
            if( !dest )
            {
                dest = (T*) src->dup(propID, (qobjinst)copyInfo->mDestinationObject, pThreadData);
                ECOinsertNVObject( pThreadData->mEci->mOmnisInstance, copyInfo->mDestinationObject, dest );
            } else {
                dest->copy( src );
            }
        }
    }
}

#endif // OMNIS_TOOLS_HE_
